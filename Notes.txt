ToDos
{
	Check this object for jQuery.each.
	
	Check HTML contenteditable change events.
	
	Better collections.
	
	Check jQuery UI / widgets.
	
	A plugin to communicate with the server.
	
	Redo the example page, with tabs.
}

Consider
{
	To design the library as standalone.
	
	Combining multiple plugins to create a new plugin. Might be as simple as "O_O.plugin(jQuery.AutoComplete).decorate(O_O.plugins.OnEnter)" Ex: combining the Auto complete jQuery with 'OnEnter Textbox'.
	
	Uniform interface across controls, elements and plugins.
	
	Not depending on jQuery. (only when performance matters, as jQuery could simplify the development process)
	
	Using jQuery plugins out of the box. (if jquery were to be the base library).
}

Goal
{

	To build a simple and powerful framework that enables "truly" rapid development.
	
	It should work well with other libraries; as the goal is to design a host for plugins (mainly UI controls).
	
	The learning curve should be very small; as unwanted complexity might hurt agility.
	
	To make it simpler, there wont be any rules but a few conventions.
	
	Developers shouldn't be forced to practice a coding pattern.
	
	The focus is on the developers ease in creating and maintaining projects.
	
	The code should make sense on the first glance. So no gimmicks and circuses.
	
	Should easily communicate with the Server.
	
	Meassures
	{
		Should support bootstrap.
		
		Should work with backbone.
		
		Could adapt jQuery UI as is.
	}
}

Way
{
	Use HTML elements as just placeholders for dynamic javascript objects.
	
	The javascript object is bound to it's html placeholder with the id attribute (or some-other attribute).
	
	The object trees have a corresponding DOM tree in the html.
	
	JS objects without corresponding HTML ids are left intact; and vice versa.
	
	Plugins refered by JS can handle the corresponding html element.
	
	The scope is defined in JS.
	
	A lego like modular architecture with plugs and hosts instead of pub-sub.
}

Components
{
	Observable dictionary.
	
	Sorted List: With just Add, Remove and Replace methods.
	
	Filtered Arrays.
}

Questions
{

	Could html be automatically injected for collections without thee needed mark-up in the document?
	
	Could custom tag names be used to identify the class of the objects. Like: <Collection> <Item> <ScrollBar> etc?

	Could the tag name be used to identify objects instead of their ids?
	
	Could the global object of the library be $_$ or O_O to represent a kiss?
	
	How does a spreadsheet achieve data bindings?
}

Noted
{
	HTML's Custom tag names appear to be case insensitive.
	
	Unlike JS, Having duplicate IDs in a document is fine with CSS.
	
	The precedence of the values $.default and $.html etc depends on the 'last declared' value.
}

Known Issues
{
	Have to find a way to hide the content still rendering finishes.
	
	This is a proof of concept. So it has to be checked for performance issues, memory leaks etc.
}

Uses
{
	Could be used as a report generator like crystal reports.
}